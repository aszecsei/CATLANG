(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{114:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),f=r,m=u["".concat(i,".").concat(f)]||u[f]||b[f]||o;return t?a.a.createElement(m,c(c({ref:n},s),{},{components:t})):a.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(114)),i={id:"unions",title:"Unions",sidebar_label:"Unions"},c={unversionedId:"unions",id:"unions",isDocsHomePage:!1,title:"Unions",description:"Types can be composed through unions; this means that a value can be one of the listed types. For example:",source:"@site/docs/unions.md",slug:"/unions",permalink:"/catlang/docs/unions",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/unions.md",version:"current",sidebar_label:"Unions",sidebar:"docs",previous:{title:"Structs",permalink:"/catlang/docs/structs"},next:{title:"Enums",permalink:"/catlang/docs/enums"}},l=[{value:"Type Union Propagation",id:"type-union-propagation",children:[]}],s={toc:l};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Types can be composed through unions; this means that a value can be one of the listed types. For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"const falseIfEven = (num: int) -> bool | int {\n  if (num % 2 == 0) {\n    return false;\n  }\n  return num;\n}\n")),Object(o.b)("h2",{id:"type-union-propagation"},"Type Union Propagation"),Object(o.b)("p",null,"Most type operators (the pointer-to operator ",Object(o.b)("inlineCode",{parentName:"p"},"*"),", for example) propagate through type unions; that is, the following are equivalent:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"type a = *(x | y);\ntype b = *x | *y;\n")),Object(o.b)("p",null,"However, the array-of operator (",Object(o.b)("inlineCode",{parentName:"p"},"[]"),") is not equivalent when propagated. It is, instead, contained:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"type a = [](x | y); // not contained in b\ntype b = []x | []y; // contained in a\n")),Object(o.b)("p",null,"In this example, ",Object(o.b)("inlineCode",{parentName:"p"},"b")," is contained in ",Object(o.b)("inlineCode",{parentName:"p"},"a"),", but they are not equivalent:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"let c: [](float | int) = [] { 1, 2.4 }; // OK\nlet d: []float | []int = [] { 1, 2.4 }; // ERROR\n")),Object(o.b)("p",null,"This has some implications for implicit casting to type unions:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"function sum1(arr: [](int | float)) -> float {\n  let res: float = 0;\n  for (num in arr) {\n    res += num as float;\n  }\n  return res;\n}\n\nlet arr1 = []float { 2.4, 1.2 };\nlet arr1sum = sum1(arr1); // OK\n\nfunction sum2(arr: []int | []float) -> float {\n  let res: float = 0;\n  for (num in arr) {\n    res += num as float;\n  }\n  return res;\n}\nlet arr2 = [](int | float) { 2, 2.4 };\nlet arr2sum = sum2(arr2); // ERROR: Array is not either an array of floats or an array of ints\n")),Object(o.b)("p",null,"The typically-desired behavior is the former. This behavior is what occurs when a developer creates a type definition for a type union and then creates an array of that type definition; this is the recommended practice, to avoid unintended behavior."))}p.isMDXComponent=!0}}]);