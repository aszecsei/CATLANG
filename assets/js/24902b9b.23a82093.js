(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),p=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(m,l(l({ref:t},i),{},{components:n})):a.a.createElement(m,l({ref:t},i))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=n[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(114)),c={id:"method-calls",title:"Method Calls",sidebar_label:"Method Calls"},l={unversionedId:"method-calls",id:"method-calls",isDocsHomePage:!1,title:"Method Calls",description:"Methods are performed using a traditional syntax:",source:"@site/docs/method-calls.md",slug:"/method-calls",permalink:"/catlang/docs/method-calls",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/method-calls.md",version:"current",sidebar_label:"Method Calls",sidebar:"docs",previous:{title:"Arrays",permalink:"/catlang/docs/arrays"},next:{title:"Control Flow",permalink:"/catlang/docs/control-flow"}},s=[{value:"Instance Method Calls",id:"instance-method-calls",children:[]},{value:"Static Method Calls",id:"static-method-calls",children:[]},{value:"Operators",id:"operators",children:[{value:"Subscript Operator",id:"subscript-operator",children:[]},{value:"Deconstruction Operator",id:"deconstruction-operator",children:[]},{value:"Casting Operator",id:"casting-operator",children:[]}]}],i={toc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Methods are performed using a traditional syntax:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"myFunction(arguments);\n")),Object(o.b)("h2",{id:"instance-method-calls"},"Instance Method Calls"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"const v1 = Vector3;\nconst v2 = v1.double();\n")),Object(o.b)("h2",{id:"static-method-calls"},"Static Method Calls"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"const v1 = Vector3;\nconst v2 = Vector3;\nconst dot = Vector3::dot(v1, v2);\n")),Object(o.b)("h2",{id:"operators"},"Operators"),Object(o.b)("p",null,"Catlang supports operator overloading for a variety of arithmetic operators:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\nfunction Vector2::operator +(this, rhs: Vector2) -> Vector2 {\n  return Vector2 {\n    x: lhs.x + rhs.x,\n    y: lhs.y + rhs.y\n  };\n}\n\nlet v1: Vector2;\nlet v2: Vector2;\nlet v3 = v1 + v2;\n")),Object(o.b)("p",null,"Operator overloads ",Object(o.b)("em",{parentName:"p"},"cannot")," be static functions."),Object(o.b)("h3",{id:"subscript-operator"},"Subscript Operator"),Object(o.b)("p",null,"In addition to common operators, catlang also supports overloading the ",Object(o.b)("inlineCode",{parentName:"p"},"[]")," subscript operator. This allows developers to create custom collections that can be accessed just like arrays."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\n\nfunction Vector2::operator [](this, index: int) -> float {\n  if (index == 0) return v.x;\n  else return v.y;\n}\nfunction Vector2::operator []=(this, index: int, value: float) {\n  if (index == 0) v.x = value;\n  else v.y = value;\n}\n\nlet example = Vector2 { x: 1.0, y: 2.0 };\nlet xval = example[0]; // 1.0\nexample[1] = 3.0; // Vector2 { x: 1.0, y: 3.0 };\n")),Object(o.b)("h3",{id:"deconstruction-operator"},"Deconstruction Operator"),Object(o.b)("p",null,"Catlang allows deconstruction of structs that implement the ",Object(o.b)("inlineCode",{parentName:"p"},"deconstruct")," operator."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\n\nfunction Vector2::operator deconstruct(this) -> (float, float) {\n  return (v.x, v.y);\n}\n\nlet example = Vector2 { x: 1.0, y: 2.0 };\nlet (a, b) = example; // a is 1.0, b is 2.0\n")),Object(o.b)("h3",{id:"casting-operator"},"Casting Operator"),Object(o.b)("p",null,"To create a user-defined cast, you can overload the casting operator:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"struct Vector2 {\n  x: float,\n  y: float\n}\nstruct Vector3 {\n  x: float,\n  y: float,\n  z: float\n}\n\nfunction Vector3::operator Vector2(v: Vector3) -> Vector2 {\n  return Vector2 {\n    x: v.x,\n    y: v.y\n  };\n}\n\nlet x = Vector3 {\n  x: 1.0,\n  y: 2.0,\n  z: 3.0\n};\nlet y = x as Vector2; // Vector2 { x: 1.0, y: 2.0 }\n")))}p.isMDXComponent=!0}}]);