(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{114:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return f}));var t=r(0),o=r.n(t);function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){c(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,c=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),b=t,f=p["".concat(a,".").concat(b)]||p[b]||d[b]||c;return r?o.a.createElement(f,i(i({ref:n},s),{},{components:r})):o.a.createElement(f,i({ref:n},s))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=r.length,a=new Array(c);a[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,a[1]=i;for(var s=2;s<c;s++)a[s]=r[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},98:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return i})),r.d(n,"toc",(function(){return l})),r.d(n,"default",(function(){return u}));var t=r(3),o=r(7),c=(r(0),r(114)),a={id:"generics",title:"Generics",sidebar_label:"Generics"},i={unversionedId:"generics",id:"generics",isDocsHomePage:!1,title:"Generics",description:"Generics look similar to generics in other languages:",source:"@site/docs/generics.md",slug:"/generics",permalink:"/catlang/docs/generics",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/generics.md",version:"current",sidebar_label:"Generics",sidebar:"docs",previous:{title:"Casting",permalink:"/catlang/docs/casting"},next:{title:"Error Handling",permalink:"/catlang/docs/error-handling"}},l=[],s={toc:l};function u(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Generics look similar to generics in other languages:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"const contains = <T>(arr: []T, value: T) -> {\n  for (x in arr) {\n    if (x == value) {\n      return true;\n    }\n  }\n  return false;\n}\n")),Object(c.b)("p",null,"When generic functions are called, the generic type can be inferred:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"const arr = []int { 1, 2, 3, 4, 5 };\nconst result = contains(arr, 4);\n")),Object(c.b)("p",null,"However, sometimes the generic type cannot be inferred and must be made explicit:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"const arrayFactory = <T>(count: number) {\n  return new [count]T;\n}\nconst arr = arrayFactory(10); // ERROR!\nconst arr = arrayFactory<int>(10); // OK!\n")),Object(c.b)("p",null,"Structs can also be made generic:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"struct Node<K, V> {\n  key: K;\n  value: V;\n  leftChild?: Node<K, V>;\n  rightChild?: Node<K, V>;\n}\nstruct Tree<K, V> {\n  root: Node<K, V>;\n}\n\nTree<K, V>::get = (this, key: K) -> {\n  const getHelper = (node?: Node<K, V>) -> {\n    if (node) {\n      if (node.key == key) {\n        return node.value;\n      } else {\n        if (node.key < key) {\n          return getHelper(node.rightChild);\n        } else {\n          return getHelper(node.leftChild);\n        }\n      }\n    } else {\n      return null;\n    }\n  }\n  return getHelper(this.root);\n}\n\nconst t: Tree<int, string> = treeMaker();\nif (let v = t.get(12)) {\n  print(v);\n}\n")))}u.isMDXComponent=!0}}]);