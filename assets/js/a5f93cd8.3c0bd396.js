(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{114:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return b}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=n.a.createContext({}),p=function(e){var t=n.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return r?n.a.createElement(b,l(l({ref:t},s),{},{components:r})):n.a.createElement(b,l({ref:t},s))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},97:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return p}));var a=r(3),n=r(7),o=(r(0),r(114)),i={id:"project-structure",title:"Project Structure",sidebar_label:"Project Structure"},l={unversionedId:"project-structure",id:"project-structure",isDocsHomePage:!1,title:"Project Structure",description:"Catlang is comprised of scripts and modules declared in different files. A catlang file containing a top-level import or export is considered a module. A file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).",source:"@site/docs/project-structure.md",slug:"/project-structure",permalink:"/catlang/docs/project-structure",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/project-structure.md",version:"current",sidebar_label:"Project Structure",sidebar:"docs",previous:{title:"Error Handling",permalink:"/catlang/docs/error-handling"},next:{title:"Interop",permalink:"/catlang/docs/interop"}},c=[{value:"Exports",id:"exports",children:[{value:"Exporting a Declaration",id:"exporting-a-declaration",children:[]},{value:"Exporting Statements",id:"exporting-statements",children:[]},{value:"Re-Exports",id:"re-exports",children:[]}]},{value:"Imports",id:"imports",children:[{value:"Importing a Single Export",id:"importing-a-single-export",children:[]},{value:"Importing a Module",id:"importing-a-module",children:[]},{value:"Path Mapping",id:"path-mapping",children:[]}]},{value:"Importing a Script",id:"importing-a-script",children:[]},{value:"Namespaces",id:"namespaces",children:[{value:"Aliases",id:"aliases",children:[]}]}],s={toc:c};function p(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Catlang is comprised of scripts and modules declared in different files. A catlang file containing a top-level ",Object(o.b)("inlineCode",{parentName:"p"},"import")," or ",Object(o.b)("inlineCode",{parentName:"p"},"export")," is considered a module. A file without any top-level ",Object(o.b)("inlineCode",{parentName:"p"},"import")," or ",Object(o.b)("inlineCode",{parentName:"p"},"export")," declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well)."),Object(o.b)("h2",{id:"exports"},"Exports"),Object(o.b)("h3",{id:"exporting-a-declaration"},"Exporting a Declaration"),Object(o.b)("p",null,"Any declaration (such as a variable, function, struct, type alias, or interface) can be exported by prefixing the ",Object(o.b)("inlineCode",{parentName:"p"},"export")," keyword."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"export const x = 12;\n")),Object(o.b)("h3",{id:"exporting-statements"},"Exporting Statements"),Object(o.b)("p",null,"Export statements are handy when exports need to be renamed, so the preceding example might be written as:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"const x = 12;\nexport { x as myNumber };\n")),Object(o.b)("h3",{id:"re-exports"},"Re-Exports"),Object(o.b)("p",null,"Often modules partially expose the featurs of other modules. A re-export does not import the module locally, or introduce a local variable."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'export { fun as myFun } from "module/foo";\n')),Object(o.b)("h2",{id:"imports"},"Imports"),Object(o.b)("p",null,"Importing is just as easy as exporting from a module. Importing an exported declaration is done via one of these ",Object(o.b)("inlineCode",{parentName:"p"},"import")," forms:"),Object(o.b)("h3",{id:"importing-a-single-export"},"Importing a Single Export"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'import { x } from "foo";\n')),Object(o.b)("p",null,"Imports can also be renamed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'import { x as y } from "foo";\n')),Object(o.b)("h3",{id:"importing-a-module"},"Importing a Module"),Object(o.b)("p",null,"You an import an entire module as a struct-like object:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'import * as foo from "module/foo";\n\nfunction main() -> {\n  foo::bar();\n}\n')),Object(o.b)("h3",{id:"path-mapping"},"Path Mapping"),Object(o.b)("p",null,"Deeply-nested folders can lead to very verbose imports. Catlang's build system provides path mapping to let you write shortcuts for these long paths. For example, if there are multiple imports from files in ",Object(o.b)("inlineCode",{parentName:"p"},"src/utils/workers/"),", you can define a path mapping in the package YAML:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'# package.yaml\npaths:\n  - "@workers": src/utils/workers/\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'import { hello } from "@workers/hello.cat"\n')),Object(o.b)("h2",{id:"importing-a-script"},"Importing a Script"),Object(o.b)("p",null,'Some files should be accessible across the entire project. Manually importing these commonly-used scripts would be a hassle; thus, Catlang provides global "script" files that are imported automatically in every file. These scripts are specified using the ',Object(o.b)("inlineCode",{parentName:"p"},"scripts")," field in the project YAML; this style of file inclusion should be similar to that of a C-style linker."),Object(o.b)("p",null,"Only files that ",Object(o.b)("em",{parentName:"p"},"are")," scripts (that is, they do not contain any top-level imports or exports) are globally imported. Even if your project YAML declares a non-script file as a script, it will not be registered as such unless it matches this criteria."),Object(o.b)("p",null,"When using script files, namespaces are recommended to avoid global namespace pollution."),Object(o.b)("p",null,"Writing libraries using modules is recommended over using scripts, as they lead to fewer unexpected results (such as accidental namespace collisions)."),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("p",null,"Namespaces can be defined using the ",Object(o.b)("inlineCode",{parentName:"p"},"namespace")," keyword:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"namespace Shapes {\n  export struct Triangle {}\n  export struct Circle {}\n}\n\nlet x = new Shapes::Triangle;\n")),Object(o.b)("p",null,"It is not recommended to export a single namespace from inside a module, as this leads to unnecessary typing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},'// shapes.cat\nexport namespace Shapes {\n  export struct Triangle {}\n  export struct Circle {}\n}\n\n// shapesConsumer.cat\nimport * as shapes from "./shapes.cat"\nlet x = new shapes::Shapes::Triangle; // shapes::Shapes is unnecessary\n')),Object(o.b)("h3",{id:"aliases"},"Aliases"),Object(o.b)("p",null,"Namespaces and namespace exports can be aliased with the ",Object(o.b)("inlineCode",{parentName:"p"},"using")," declaration."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-catlang"},"namespace Shapes {\n  export struct Triangle {}\n  export struct Circle {}\n}\n\nusing STriangle = Shapes::Triangle;\n")))}p.isMDXComponent=!0}}]);