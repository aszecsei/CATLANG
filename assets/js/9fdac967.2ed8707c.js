(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return y}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,y=b["".concat(c,".").concat(u)]||b[u]||d[u]||i;return n?r.a.createElement(y,s(s({ref:t},o),{},{components:n})):r.a.createElement(y,s({ref:t},o))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var o=2;o<i;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(114)),c={id:"arrays",title:"Arrays",sidebar_label:"Arrays"},s={unversionedId:"arrays",id:"arrays",isDocsHomePage:!1,title:"Arrays",description:"Catlang's arrays differ from C-style arrays in that they contain information about their length (see C's Biggest Mistake).",source:"@site/docs/arrays.md",slug:"/arrays",permalink:"/catlang/docs/arrays",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/arrays.md",version:"current",sidebar_label:"Arrays",sidebar:"docs",previous:{title:"Types",permalink:"/catlang/docs/types"},next:{title:"Method Calls",permalink:"/catlang/docs/method-calls"}},l=[{value:"Initializing Arrays",id:"initializing-arrays",children:[]},{value:"Iteration",id:"iteration",children:[]},{value:"Accessing Elements",id:"accessing-elements",children:[]},{value:"Slices and Ranges",id:"slices-and-ranges",children:[]},{value:"Adding and Changing Elements",id:"adding-and-changing-elements",children:[]}],o={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Catlang's arrays differ from C-style arrays in that they contain information about their length (see ",Object(i.b)("a",{parentName:"p",href:"http://www.drdobbs.com/architecture-and-design/cs-biggest-mistake/228701625"},"C's Biggest Mistake"),")."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const finalElement = myArray[myArray.length - 1];\n")),Object(i.b)("p",null,"Arrays are instantiated using a syntax similar to C, and can be either static- or dynamically-sized:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const staticArray = new [25]int;\nconst dynamicArray = new [..]int;\n")),Object(i.b)("p",null,"Statically-sized arrays may be created on either the stack or the heap, depending on whether or not the ",Object(i.b)("inlineCode",{parentName:"p"},"new")," keyword is used. Dynamically-sized arrays ",Object(i.b)("em",{parentName:"p"},"must")," be stored on the heap."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const staticArray = [25]int; // stored on the stack\nconst staticArray2 = new [25]int; // stored on the heap\nconst dynamicArray = new [..]int; // stored on the heap\nconst dynamicArray2 = [..]int; // syntax error\n")),Object(i.b)("p",null,"Arrays of pointers and pointers to arrays are syntactically different:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const pointerToArray : *[]int = @myArray;\nconst arrayOfPointers : []*int = myArray;\n")),Object(i.b)("h2",{id:"initializing-arrays"},"Initializing Arrays"),Object(i.b)("p",null,"Arrays can be initialized when they are created:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const growableArray = new [..]int { 0, 1, 2 };\nconst staticArray = []int { 0, 1, 2 };\n")),Object(i.b)("p",null,"Note that when initializing a statically-sized array, the array size can be omitted. If the array size is present and does not match the initialized size, an error is thrown."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const whoops = [5]int { 0, 1, 2 }; // ERROR: size of initialization does not match array size\n")),Object(i.b)("h2",{id:"iteration"},"Iteration"),Object(i.b)("p",null,"Arrays can be iterated over using a foreach-style loop (via the ",Object(i.b)("a",{parentName:"p",href:"iterators"},"Iterator")," interface):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const arr = []int { 1, 2, 3, 4, 5 };\nfor (x in arr) {\n  print(x);\n}\n")),Object(i.b)("p",null,"They can also be iterated over with a C-style for loop:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const arr = []int { 1, 2, 3, 4, 5 };\nfor (i = 0; i < arr.length; ++i) {\n  let x = arr[i];\n  print(x);\n}\n")),Object(i.b)("h2",{id:"accessing-elements"},"Accessing Elements"),Object(i.b)("p",null,"You can access an element from an array by calling the subscript operator on it with the index of the element you want. Like most languages, indices start at zero."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"const printFirst = (in: []string) -> {\n  print(in[0]);\n}\n")),Object(i.b)("h2",{id:"slices-and-ranges"},"Slices and Ranges"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"TODO")),Object(i.b)("h2",{id:"adding-and-changing-elements"},"Adding and Changing Elements"),Object(i.b)("p",null,"Arrays are mutable by default. You can replace any existing element of an array using the subscript operator:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},'const replaceFirst = (replaceIn: []string) -> {\n  replaceIn[0] = "new string!";\n}\n')),Object(i.b)("p",null,"You can add, insert, or remove elements from dynamically-sized arrays:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-catlang"},"let example = new [..]int { 0, 1, 2 };\nexample.add(4); // { 0, 1, 2, 4 };\nexample.insert(3, 3); // { 0, 1, 2, 3, 4 };\nexample.insert(0, -1); // { -1, 0, 1, 2, 3, 4 };\nexample.removeAt(0); // { 0, 1, 2, 3, 4 };\n")))}p.isMDXComponent=!0}}]);