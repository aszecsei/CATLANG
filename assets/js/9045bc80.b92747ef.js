(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=u(n),d=r,m=f["".concat(o,".").concat(d)]||f[d]||p[d]||c;return n?a.a.createElement(m,i(i({ref:t},l),{},{components:n})):a.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<c;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),c=(n(0),n(114)),o={id:"interfaces",title:"Interfaces",sidebar_label:"Interfaces"},i={unversionedId:"interfaces",id:"interfaces",isDocsHomePage:!1,title:"Interfaces",description:"Interfaces work much the same as Rust's trait system. Interfaces are a list of required methods, and can be implemented by any struct. Even structs defined externally can have interfaces added (although duplicate interface implementations will throw an error).",source:"@site/docs/interfaces.md",slug:"/interfaces",permalink:"/catlang/docs/interfaces",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/interfaces.md",version:"current",sidebar_label:"Interfaces",sidebar:"docs",previous:{title:"Enums",permalink:"/catlang/docs/enums"},next:{title:"Iterators",permalink:"/catlang/docs/iterators"}},s=[{value:"Interfaces on Type Unions",id:"interfaces-on-type-unions",children:[]}],l={toc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Interfaces work much the same as Rust's trait system. Interfaces are a list of required methods, and can be implemented by any struct. Even structs defined externally can have interfaces added (although duplicate interface implementations will throw an error)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-catlang"},"interface ICollection<T> {\n  function operator[](this, index: int)\n}\n\nimpl<T> ICollection<T> for ([]T | [..]T) {\n\n}\n")),Object(c.b)("h2",{id:"interfaces-on-type-unions"},"Interfaces on Type Unions"),Object(c.b)("p",null,"Implementing an interface for a type union implements the interface for all types in the union."))}u.isMDXComponent=!0}}]);