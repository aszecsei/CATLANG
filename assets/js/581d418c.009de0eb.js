(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return j}));var a=n(0),l=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=l.a.createContext({}),o=function(e){var t=l.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=o(e.components);return l.a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},O=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,b=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=o(n),O=a,j=p["".concat(b,".").concat(O)]||p[O]||m[O]||r;return n?l.a.createElement(j,i(i({ref:t},d),{},{components:n})):l.a.createElement(j,i({ref:t},d))}));function j(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,b=new Array(r);b[0]=O;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,b[1]=i;for(var d=2;d<r;d++)b[d]=n[d];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return o}));var a=n(3),l=n(7),r=(n(0),n(114)),b={id:"syntax",title:"Syntax",sidebar_label:"Syntax"},i={unversionedId:"syntax",id:"syntax",isDocsHomePage:!1,title:"Syntax",description:"Comments",source:"@site/docs/syntax.md",slug:"/syntax",permalink:"/catlang/docs/syntax",editUrl:"https://github.com/aszecsei/catlang/edit/master/website/docs/syntax.md",version:"current",sidebar_label:"Syntax",sidebar:"docs",previous:{title:"Overview",permalink:"/catlang/docs/overview"},next:{title:"Types",permalink:"/catlang/docs/types"}},c=[{value:"Comments",id:"comments",children:[]},{value:"Reserved Words",id:"reserved-words",children:[]},{value:"Identifiers",id:"identifiers",children:[]},{value:"Blocks",id:"blocks",children:[]},{value:"Precedence and Associativity",id:"precedence-and-associativity",children:[]}],d={toc:c};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"comments"},"Comments"),Object(r.b)("p",null,"Line comments start with ",Object(r.b)("inlineCode",{parentName:"p"},"//")," and end at the end of the line:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-catlang"},"// This is a comment.\n")),Object(r.b)("p",null,"Block comments start with ",Object(r.b)("inlineCode",{parentName:"p"},"/*")," and end with ",Object(r.b)("inlineCode",{parentName:"p"},"*/"),". They can span multiple lines:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-catlang"},"/* This\n   is\n   a\n   multi-line\n   comment. */\n")),Object(r.b)("p",null,"Unlike C, block comments can nest in catlang:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-catlang"},"/* this is /* a nested */ comment. */\n")),Object(r.b)("p",null,"Thus, you can easily comment out an entire block of code, even if the code already contains block comments."),Object(r.b)("h2",{id:"reserved-words"},"Reserved Words"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"any")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"let")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"const")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"new")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"delete")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"typeof")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"is")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"as")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"in")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"function")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"return")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"struct")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"type")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enum")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"owned")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"import")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"export")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"from")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"for")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"while")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"do")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"loop")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"if")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"else")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"break")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"continue")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"null")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"true")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"false")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"this")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"volatile")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"unreachable")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"namespace")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"using"))),Object(r.b)("h2",{id:"identifiers"},"Identifiers"),Object(r.b)("p",null,"Naming rules are similar to other programming languages. Identifiers start with either a letter or underscore and may contain letters, digits, and underscores. They are case-sensitive."),Object(r.b)("h2",{id:"blocks"},"Blocks"),Object(r.b)("p",null,"Curly braces (",Object(r.b)("inlineCode",{parentName:"p"},"{}"),") define blocks. You can use a block anywhere a statement is allowed, such as in control flow statements. Function bodies are also blocks."),Object(r.b)("h2",{id:"precedence-and-associativity"},"Precedence and Associativity"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Precedence"),Object(r.b)("th",{parentName:"tr",align:null},"Operator"),Object(r.b)("th",{parentName:"tr",align:null},"Description"),Object(r.b)("th",{parentName:"tr",align:null},"Associativity"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"1"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"::")),Object(r.b)("td",{parentName:"tr",align:null},"Scope resolution"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"2"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"a++")," ",Object(r.b)("inlineCode",{parentName:"td"},"a--")," ",Object(r.b)("inlineCode",{parentName:"td"},"a!")," ",Object(r.b)("inlineCode",{parentName:"td"},"a()")," ",Object(r.b)("inlineCode",{parentName:"td"},"a[]")," ",Object(r.b)("inlineCode",{parentName:"td"},"a.")," ",Object(r.b)("inlineCode",{parentName:"td"},"?")),Object(r.b)("td",{parentName:"tr",align:null},"Unary suffix, function call, subscript, member access, null conditional"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"3"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"++a")," ",Object(r.b)("inlineCode",{parentName:"td"},"--a")," ",Object(r.b)("inlineCode",{parentName:"td"},"+a")," ",Object(r.b)("inlineCode",{parentName:"td"},"-a")," ",Object(r.b)("inlineCode",{parentName:"td"},"!a")," ",Object(r.b)("inlineCode",{parentName:"td"},"~a")," ",Object(r.b)("inlineCode",{parentName:"td"},"as")," ",Object(r.b)("inlineCode",{parentName:"td"},"@a")," ",Object(r.b)("inlineCode",{parentName:"td"},"*a")," ",Object(r.b)("inlineCode",{parentName:"td"},"??")),Object(r.b)("td",{parentName:"tr",align:null},"Unary prefix, casting, null coalesce"),Object(r.b)("td",{parentName:"tr",align:null},"Right-to-left")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"4"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"*")," ",Object(r.b)("inlineCode",{parentName:"td"},"/")," ",Object(r.b)("inlineCode",{parentName:"td"},"%")),Object(r.b)("td",{parentName:"tr",align:null},"Multiply, divide, modulo"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"5"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"+")," ",Object(r.b)("inlineCode",{parentName:"td"},"-")),Object(r.b)("td",{parentName:"tr",align:null},"Add, subtract"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"6"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"..")," ",Object(r.b)("inlineCode",{parentName:"td"},"...")),Object(r.b)("td",{parentName:"tr",align:null},"Range"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"7"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"<<")," ",Object(r.b)("inlineCode",{parentName:"td"},">>")),Object(r.b)("td",{parentName:"tr",align:null},"Bitshift"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"8"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"&")),Object(r.b)("td",{parentName:"tr",align:null},"Bitwise and"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"9"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"^")),Object(r.b)("td",{parentName:"tr",align:null},"Bitwise xor"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"10"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("code",null,"|")),Object(r.b)("td",{parentName:"tr",align:null},"Bitwise or"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"11"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"<")," ",Object(r.b)("inlineCode",{parentName:"td"},"<=")," ",Object(r.b)("inlineCode",{parentName:"td"},">")," ",Object(r.b)("inlineCode",{parentName:"td"},">=")," ",Object(r.b)("inlineCode",{parentName:"td"},"in")),Object(r.b)("td",{parentName:"tr",align:null},"Comparison"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"12"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"is")),Object(r.b)("td",{parentName:"tr",align:null},"Type test"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"13"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"==")," ",Object(r.b)("inlineCode",{parentName:"td"},"!=")),Object(r.b)("td",{parentName:"tr",align:null},"Equality"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"14"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"&&")),Object(r.b)("td",{parentName:"tr",align:null},"Logical and"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"15"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("code",null,"|"," ","|")),Object(r.b)("td",{parentName:"tr",align:null},"Logical or"),Object(r.b)("td",{parentName:"tr",align:null},"Left-to-right")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"16"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"a ? b : c")),Object(r.b)("td",{parentName:"tr",align:null},"Ternary"),Object(r.b)("td",{parentName:"tr",align:null},"Right-to-left")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"17"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"=")," ",Object(r.b)("inlineCode",{parentName:"td"},"+=")," ",Object(r.b)("inlineCode",{parentName:"td"},"-=")," ",Object(r.b)("inlineCode",{parentName:"td"},"*=")," ",Object(r.b)("inlineCode",{parentName:"td"},"/=")," ",Object(r.b)("inlineCode",{parentName:"td"},"%=")," ",Object(r.b)("inlineCode",{parentName:"td"},"&=")," ",Object(r.b)("inlineCode",{parentName:"td"},"&&=")," ",Object(r.b)("code",null,"|","=")," ",Object(r.b)("code",null,"|","|","=")," ",Object(r.b)("inlineCode",{parentName:"td"},"^=")," ",Object(r.b)("inlineCode",{parentName:"td"},"<<=")," ",Object(r.b)("inlineCode",{parentName:"td"},">>=")," ",Object(r.b)("inlineCode",{parentName:"td"},"??=")),Object(r.b)("td",{parentName:"tr",align:null},"Assignment"),Object(r.b)("td",{parentName:"tr",align:null},"Right-to-left")))))}o.isMDXComponent=!0}}]);