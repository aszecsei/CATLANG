{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CatLang",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#type"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#operator"
		}
	],
	"repository": {
		"constant": {
			"patterns": [
				{
					"comment": "Floating point literal",
					"name": "constant.numeric.float.catlang",
					"match": "\\b[0-9]+\\.([0-9]+)?([eE][+-]?[0-9]+)?\\b"
				},
				{
					"comment": "Integer literal (decimal)",
					"name": "constant.numeric.integer.decimal.catlang",
					"match": "\\b[0-9]+\\b"
				},
				{
					"comment": "Integer literal (hexadecimal)",
					"name": "constant.numeric.integer.hexadecimal.catlang",
					"match": "\\b0x[a-fA-F0-9]+\\b"
				},
				{
					"comment": "Integer literal (octal)",
					"name": "constant.numeric.integer.octal.catlang",
					"match": "\\b0o[0-7]+\\b"
				},
				{
					"comment": "Integer literal (binary)",
					"name": "constant.numeric.integer.binary.catlang",
					"match": "\\b0b[01]+\\b"
				},
				{
					"comment": "Boolean literal",
					"name": "constant.language.boolean.catlang",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.language.null.catlang",
					"match": "\\b(null)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "variable.language.this.catlang",
					"match": "\\b(this)\\b"
				},
				{
					"name": "keyword.control.catlang",
					"match": "\\b(break|continue|else|if|in|for|return|while)\\b"
				},
				{
					"name": "keyword.other.as.catlang",
					"match": "(\\b(as)\\b)"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.catlang",
					"match": ";"
				},
				{
					"name": "punctuation.other.comma.catlang",
					"match": ","
				},
				{
					"name": "punctuation.other.paren.catlang",
					"match": "[)(]"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#qchar-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.catlang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qchar-single": {
			"name": "constant.character.catlang",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"patterns": [
				{
					"name": "constant.character.escape.catlang",
					"match": "\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.documentation.catlang",
					"begin": "/\\*\\*(?!/)",
					"end": "\\*/"
				},
				{
					"name": "comment.block.catlang",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"begin": "(//)",
					"end": "(?=$)",
					"name": "comment.line.double-slash.catlang"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"name": "storage.type.core.catlang",
					"match": "\\b((S|U)(8|16|32|64)|char|int|long|bool|float|F32|double|F64|string)\\b"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"comment": "Mutable variable declarations",
					"match": "(let) ([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "storage.type.catlang"
						},
						"2": {
							"name": "variable.other.mutable.catlang"
						}
					}
				},
				{
					"comment": "Constant variable declarations",
					"match": "(const) ([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "storage.type.catlang"
						},
						"2": {
							"name": "variable.other.catlang"
						}
					}
				},
				{
					"comment": "Variable type declarations",
					"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=[:] )",
					"captures": {
						"1": {
							"name": "variable.other.catlang"
						}
					}
				},
				{
					"name": "variable.other.catlang",
					"match": "(?<!\\:\\s)([a-zA-Z_][a-zA-Z0-9_]*)\\s(?==)"
				}
			]
		},
		"entity": {
			"patterns": [
				{
					"match": "(?<=function )([a-zA-Z][a-zA-Z0-9_]*)",
					"name": "entity.name.function.catlang"
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*)(?=[(])",
					"name": "entity.name.function.catlang"
				},
				{
					"match": "\\b(enum)\\s+([a-zA-Z_][a-zA-Z0-9_]+)",
					"captures": {
						"1": {
							"name": "storage.type.catlang"
						},
						"2": {
							"name": "entity.name.type.catlang"
						}
					}
				},
				{
					"match": "\\b(struct)\\s+(SOA\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "storage.type.catlang"
						},
						"2": {
							"name": "storage.type.catlang"
						},
						"3": {
							"name": "entity.name.type.catlang"
						}
					}
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"name": "keyword.operator.member-access.catlang",
					"match": "\\s(\\.)\\b"
				},
				{
					"name": "keyword.operator.member-access.catlang",
					"match": "\\b(\\.)\\b"
				},
				{
					"name": "keyword.operator.member-access.catlang",
					"match": "\\B(\\.)\\b"
				},
				{
					"name": "keyword.operator.range.catlang",
					"match": "(\\.\\.)"
				},
				{
					"name": "keyword.operator.path.catlang",
					"match": "(\\:\\:)"
				},
				{
					"name": "keyword.operator.return-type.catlang",
					"match": "(->)"
				},
				{
					"name": "variable.language.ignored.catlang",
					"match": "\\b(_)\\b"
				},
				{
					"name": "keyword.operator.assignment.catlang",
					"match": "(\\=)"
				},
				{
					"name": "keyword.operator.assignment.catlang",
					"match": "\\b(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|=)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.catlang",
					"match": "(!|\\+|-|/|\\*|%|\\^|\\||<<|>>)"
				},
				{
					"name": "keyword.operator.comparison.catlang",
					"match": "(&&|\\|\\||==|!=)"
				},
				{
					"name": "keyword.operator.comparison.catlang",
					"match": "\\s(<|>)"
				},
				{
					"name": "keyword.operator.comparison.catlang",
					"match": "\\B(<=|>=)\\B"
				}
			]
		}
	},
	"scopeName": "source.catlang"
}